{"version":3,"sources":["components/CompanyCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["CompanyCard","useState","name","setName","state","setState","city","setCity","description","setDescription","foundedDate","setFoundedDate","companyList","setCompanyList","newName","setNewName","newState","setNewState","newCity","setNewCity","newDescription","setNewDescription","newFoundedDate","setNewFoundedDate","showForm","setShowForm","open","setOpen","editMode","setEditMode","addFounderMode","setAddFounderMode","newFounder","setNewFounder","founderPosition","setFounderPosition","addCompany","axios","post","then","result","getCompanies","get","response","console","log","data","className","data-testid","Button","variant","color","onClick","inputprops","data-test","map","val","key","Card","value","id","Dialog","onClose","DialogTitle","DialogContent","TextField","label","onChange","event","target","size","put","editingItem","find","company","openEditMode","delete","filter","defaultValue","fullWidth","required","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c26b68a.chunk.js","sourcesContent":["import '../App.css'\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst CompanyCard = () => {\n\n    const [name, setName] = useState(\"\")\n    const [state, setState] = useState(\"\")\n    const [city, setCity] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [foundedDate, setFoundedDate] = useState(\"\")\n\n    const [companyList, setCompanyList] = useState([])\n    const [newName, setNewName] = useState(\"\")\n    const [newState, setNewState] = useState(\"\")\n    const [newCity, setNewCity] = useState(\"\")\n    const [newDescription, setNewDescription] = useState(\"\")\n    const [newFoundedDate, setNewFoundedDate] = useState(\"\")\n\n    const [showForm, setShowForm] = useState(false)\n    const [open, setOpen] = useState(0)\n    const [editMode, setEditMode] = useState(0)\n    const [addFounderMode, setAddFounderMode] = useState(0)\n    const [newFounder, setNewFounder] = useState(\"\")\n    const [founderPosition, setFounderPosition] = useState(\"\")\n\n\n\n    const handleClickOpen = (value) => {\n        setOpen(value)\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const openEditMode = (value) => {\n        setEditMode(value)\n        let editingItem = companyList.find(company => {\n            return company.id === value;\n        })\n\n        setNewName(editingItem.name)\n        setNewState(editingItem.state)\n        setNewCity(editingItem.city)\n        setNewFoundedDate(editingItem.foundedDate)\n        setNewDescription(editingItem.description)\n        setNewFounder(editingItem.newFounder)\n        setFounderPosition(editingItem.founderPosition)\n    }\n\n    const closeEditMode = (value) => {\n        setEditMode(0)\n        setName(\"\")\n    }\n\n    const openFounderTextField = (value) => {\n        setAddFounderMode(value)\n\n    }\n\n    const closeFounderTextField = () => {\n        setAddFounderMode(0)\n        setNewFounder(\"\")\n        setFounderPosition(\"\")\n    }\n\n    const addCompany = () => {\n        const defaultState = \"\";\n        setShowForm(true);\n        axios.post('https://techstars-challenge-keljohnson.herokuapp.com/create', {\n            name: name,\n            state: state,\n            city: city,\n            foundedDate: foundedDate,\n            description: description,\n            newFounder: \"\",\n            founderPosition: \"\"\n        }).then((result) => {\n            setCompanyList([\n                ...companyList,\n                {\n\n                    name: name,\n                    state: state,\n                    city: city,\n                    foundedDate: foundedDate,\n                    description: description\n                },\n            ])\n            setName(defaultState)\n            setState(defaultState)\n            setCity(defaultState)\n            setDescription(defaultState)\n            setFoundedDate(defaultState)\n        })\n    }\n\n    const addFounder = (id) => {\n        axios.put(`https://techstars-challenge-keljohnson.herokuapp.com/addFounder`, { newFounder: newFounder, founderPosition: founderPosition, id: id }).then((response) => {\n            setCompanyList(\n                companyList.map((val) => {\n\n                    return val.id === id\n                        ? {\n                            id: val.id,\n                            name: newName ? newName : val.name,\n                            state: newState ? newState : val.state,\n                            city: newCity ? newCity : val.city,\n                            foundedDate: newFoundedDate ? newFoundedDate : val.foundedDate,\n                            description: newDescription ? newDescription : val.description,\n                            newFounder: newFounder ? newFounder : val.newFounder,\n                            founderPosition: founderPosition ? founderPosition : val.founderPosition\n                        }\n                        : val;\n                })\n            )\n        })\n        setAddFounderMode(0)\n        setOpen(false)\n\n    }\n\n    const getCompanies = () => {\n        axios.get('https://techstars-challenge-keljohnson.herokuapp.com/companies').then((response) => {\n            console.log('RESPONSE', response.data)\n            setCompanyList(response.data)\n\n        })\n    }\n\n    const updateCompany = (id) => { // Try and make it so you can update the whole card with this one function\n        axios.put('https://techstars-challenge-keljohnson.herokuapp.com/update', { name: newName, state: newState, city: newCity, foundedDate: newFoundedDate, description: newDescription, newFounder: newFounder, founderPosition: founderPosition, id: id }).then((response) => {\n            setCompanyList(\n                companyList.map((val) => {\n                    return val.id === id\n                        ? {\n                            id: val.id,\n                            name: newName ? newName : val.name,\n                            state: newState ? newState : val.state,\n                            city: newCity ? newCity : val.city,\n                            foundedDate: newFoundedDate ? newFoundedDate : val.foundedDate,\n                            description: newDescription ? newDescription : val.description,\n                            newFounder: newFounder ? newFounder : val.newFounder,\n                            founderPosition: founderPosition ? founderPosition : val.founderPosition\n                        }\n                        : val;\n                })\n            )\n            setEditMode(0)\n            setOpen(false)\n            setNewName(\"\")\n            setNewState(\"\")\n            setNewCity(\"\")\n            setNewDescription(\"\")\n            setNewFoundedDate(\"\")\n        })\n    }\n\n    const deleteCompany = (id) => {\n        axios.delete(`https://techstars-challenge-keljohnson.herokuapp.com/delete/${id}`).then((response) => {\n            setCompanyList(\n                companyList.filter((val) => {\n                    return val.id !== id;\n                })\n            )\n        })\n    }\n\n\n    const renderCompanies = () => {\n        return (\n            <div className=\"App\">\n\n                <div className=\"companies\" data-testid=\"companies-card-rendered\">\n                    <Button variant=\"outlined\" color=\"primary\" onClick={getCompanies} inputprops={{ \"data-testid\": \"get-companies-button\" }} data-test=\"get-companies-button\">Get List of Companies</Button>\n                    {companyList.map((val, key) => {\n                        return (\n                            <Card className=\"company\" inputprops={{ \"data-testid\": \"companies-card-rendered\" }}>\n                                <div>\n                                    <h3>Company Name: {val.name}</h3>\n                                    <h3>City: {val.city}</h3>\n                                    <h3>State: {val.state}</h3>\n                                    <h3>Description: {val.description}</h3>\n\n                                </div>\n                                <Button onClick={() => handleClickOpen(val.id)}>More...</Button>\n                                <Dialog\n                                    open={open === val.id}\n                                    onClose={() => handleClose(val.id)}\n                                >\n                                    <DialogTitle className=\"dialog-title\">{val.name}</DialogTitle>\n                                    <DialogContent>\n\n                                        {editMode ? null : <div className=\"dialog-content\">\n                                            <div className=\"founding-date-location\">\n                                                <div className=\"founded-date\">{val.foundedDate}</div> <div className=\"location\"> {val.city}, {val.state}</div>\n                                            </div>\n                                            <div className=\"description\">\n                                                {val.description}\n                                            </div>\n\n                                            {val.newFounder === \"\" ? null\n                                                :\n                                                <div className=\"founder-container\">Founder\n                                                    <div className=\"founders-section\">\n                                                        {val.newFounder}&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;{val.founderPosition}\n                                                    </div>\n                                                </div>\n                                            }\n\n                                            {addFounderMode ? (\n                                                <div>\n                                                    <TextField variant=\"outlined\" label=\"Founder\" onChange={(event) => {\n                                                        setNewFounder(event.target.value)\n                                                    }}>Founder</TextField>\n                                                    <TextField variant=\"outlined\" label=\"Position\" onChange={(event) => {\n                                                        setFounderPosition(event.target.value)\n                                                    }}>Position</TextField>\n                                                    <Button variant='outlined' color=\"primary\" size=\"medium\" onClick={() => (addFounder(val.id))}>Save</Button>\n                                                    <Button variant='outlined' color=\"primary\" size=\"medium\" onClick={() => (closeFounderTextField())}>Cancel</Button>\n                                                </div>)\n                                                :\n                                                (<div>\n                                                    <Button variant='outlined' color=\"primary\" size=\"medium\" onClick={() => (openFounderTextField(val.id))}>Add Founder</Button>\n                                                </div>)\n\n                                            }\n                                            <div className=\"edit-delete-buttons\">\n                                                <Button variant=\"outlined\" color=\"primary\" size=\"small\" onClick={() => (openEditMode(val.id))}>Edit</Button>\n                                                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => (deleteCompany(val.id))}>Delete</Button>\n                                            </div>\n\n\n                                        </div>}\n\n                                        {editMode ? (<div className=\"dialog-content\">\n                                            <TextField className=\"title\" variant=\"outlined\" label=\"Company Name\" defaultValue={val.name} onChange={(event) => {\n                                                setNewName(event.target.value ? event.target.value : val.name)\n                                            }} />\n                                            <div className=\"founding-date-location\">\n                                                <TextField className=\"founded-date\" variant=\"outlined\" label=\"Founded Date\" defaultValue={val.foundedDate} onChange={(event) => {\n                                                    setNewFoundedDate(event.target.value ? event.target.value : val.foundedDate)\n                                                }} /> <TextField className=\"location\" variant=\"outlined\" label=\"State\" defaultValue={val.state} onChange={(event) => {\n                                                    setNewState(event.target.value ? event.target.value : val.state)\n                                                }} /> <TextField className=\"location\" variant=\"outlined\" label=\"City\" defaultValue={val.city} onChange={(event) => {\n                                                    setNewCity(event.target.value ? event.target.value : val.city)\n                                                }} />\n                                            </div>\n                                            <TextField className=\"description\" variant=\"outlined\" label=\"Description\" defaultValue={val.description} fullWidth onChange={(event) => {\n                                                setNewDescription(event.target.value ? event.target.value : val.description)\n                                            }} />\n                                            {val.newFounder === \"\" ? null\n                                                : <div className=\"founder-founder-position\">\n                                                    <TextField variant=\"outlined\" label=\"Founder\" defaultValue={val.newFounder} onChange={(event) => {\n                                                        setNewFounder(event.target.value ? event.target.value : val.newFounder)\n                                                    }} />\n                                                    <TextField variant=\"outlined\" label=\"Position\" defaultValue={val.founderPosition} onChange={(event) => {\n                                                        setFounderPosition(event.target.value ? event.target.value : val.founderPosition)\n                                                    }} />\n                                                </div>\n                                            }\n\n                                            <div className=\"save-cancel-button\">\n                                                <Button variant=\"outlined\" color=\"primary\" size=\"small\" onClick={() => (updateCompany(val.id))}>Save</Button>\n                                                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => (closeEditMode(val.id))}>Cancel</Button>\n                                            </div>\n                                        </div>\n\n                                        ) : null}\n\n                                    </DialogContent>\n                                </Dialog>\n\n                            </Card>\n\n                        )\n                    })}\n                </div>\n                {\n                    showForm ? null : (<Card className=\"new-company-container\">\n                        <form className=\"form\">\n                            <TextField label=\"Company Name\" variant=\"outlined\" fullWidth required onChange={(event) => {\n                                setName(event.target.value);\n                            }} />\n                            <TextField label=\"State\" variant=\"outlined\" required onChange={(event) => {\n                                setState(event.target.value);\n                            }} />\n                            <TextField label=\"City\" variant=\"outlined\" required onChange={(event) => {\n                                setCity(event.target.value);\n                            }} />\n                            <TextField label=\"Founded Date\" variant=\"outlined\" onChange={(event) => {\n                                setFoundedDate(event.target.value);\n                            }} />\n                            <TextField label=\"Company Description\" variant=\"outlined\" fullWidth required onChange={(event) => {\n                                setDescription(event.target.value);\n                            }} />\n\n                            <Button variant=\"outlined\" color=\"primary\" onClick={addCompany}>Save Company</Button>\n                        </form>\n                    </Card>)\n                }\n                {\n                    showForm ? <Button variant=\"contained\" color=\"primary\" onClick={() => setShowForm(!showForm)}>Add Company</Button>\n                        :\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => setShowForm(!showForm)}>Cancel</Button>\n                }\n\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"company-card\">\n            {renderCompanies()}\n        </div>\n    )\n}\n\nexport default CompanyCard;","import { useEffect, useState } from 'react';\nimport CompanyCard from './components/CompanyCard';\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <CompanyCard />\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}